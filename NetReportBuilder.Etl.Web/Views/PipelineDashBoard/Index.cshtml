@using NetReportBuilder.Etl.Model;
@model DashBoardViewModel

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!-- Other head content -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>

<script src="~/js/ETLDashBoard.js"></script>

<script src="https://kit.fontawesome.com/27be94b9e4.js" crossorigin="anonymous"></script>

<head>


    @*For DataTable*@
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">

    <script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>

    @*For DataTable*@
</head>


<style>
    .AddButton {
        background-color: blue; /* Green */
        border: none;
        color: white;
        padding: 6px 8px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        border-radius: 3px;
        margin: 5px;
    }

    .EditButton {
        background-color: green; /* Green */
        border: none;
        color: white;
        padding: 6px 8px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        border-radius: 3px;
        margin: 5px;
    }

    .DeleteButton {
        background-color: red; /* Green */
        border: none;
        color: white;
        padding: 6px 8px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        border-radius: 3px;
        margin: 5px;
    }

    .modal .closee {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        outline: none;
        border: 0;
        padding: 2px 20px;
        border-radius: 5px;
        margin-bottom: 1rem;
    }

    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
        z-index: 1050; /* Higher than modal */
        display: flex; /* Center the loader */
        justify-content: center;
        align-items: center;
    }

    #loaderIndex {
        z-index: 1060; /* Ensure loader is above overlay */
    }

    .modal {
        z-index: 1040; /* Ensure modal is below overlay */
    }
</style>
   


<div id="overlay" style="display:none;">
    <div id="loaderIndex">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
</div>
@*@using (Html.BeginForm("CreatePipeline", "PipelineDashBoard", FormMethod.Post))*@
@using (Html.BeginForm("CreatePipeline", "PipelineDashBoard", FormMethod.Post, new { id = "pipelineForm" }))
{
    <center><h3 id="Success" style="color:green"></h3></center>
    <center><h3 id="fail" style="color:red"></h3></center>

    <div class="form-group">

        <div class="row">
            <div class="col-sm-4">
                <h4 style="text-decoration:underline;vertical-align:bottom;padding:5px;">Pipelines</h4>
            </div>

            <div class="col-sm-4">
                <input type="text" name="pipelineName" id="pipelineName" class="form-control" placeholder="Enter pipeline name" required />

            </div>

            <div class="col-sm-2">
                <input type="submit" id="btnCreatePipeLine" name="Submit" value="Create" class="btn btn-primary SubmitButton" />
            </div>


        </div>
    </div>

}
@*<div class="col-sm-2">
        <form action="@Url.Action("AddConnection", "MultiDataBaseConfiguration")" method="get">
            <input type="submit" id="btnCreatePipeLine" name="Submit" value="Add Connection" class="btn btn-primary SubmitButton" />
        </form>
    </div>*@



<div style="max-height: 647px; overflow-y: auto;">
    <table id="table-exports" class="table table-sm table-bordered">
        <thead>
            <tr style="background-color:lightblue;color:black;font-family:Arial;font-size:11px;font-weight:bold;">
                <th class="text-center">
                    SlNo
                </th>
                <th class="text-center">
                    @Html.DisplayNameFor(model => model.CurrentPipeline.FileName)
                </th>
                @*<th class="text-center">
                        @Html.DisplayNameFor(model => model.CurrentPipeline.DataSourceType)
                    </th>*@
                <th class="text-center">
                    @Html.DisplayNameFor(model => model.CurrentPipeline.Description)
                </th>
                <th class="text-center">
                    @Html.DisplayNameFor(model => model.CurrentPipeline.ExecutionMode)
                </th>
                <th class="text-center">
                    @Html.DisplayNameFor(model => model.CurrentPipeline.Status)
                </th>
                <th class="text-center">
                    @Html.DisplayNameFor(model => model.CurrentPipeline.LastExecutedOn)
                </th>
                <th class="text-center">
                    Action
                </th>

            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.PipeLines.Count <= 0)
            {
                <tr style="min-width:100%;"><td colspan="6">No records found</td></tr>

            }
            else
            {
                @foreach (var item in Model.PipeLines.Select((x, i) => new { Data = x, Index = i + 1 }))
                {
                    <tr>
                        <td class="text-left">
                            @item.Index
                        </td>
                        <td class="text-center fileNameColumn">
                            @Html.DisplayFor(modelItem => item.Data.FileName)
                        </td>
                        @*<td class="text-left">
                                @Html.DisplayFor(modelItem => item.Data.e)
                            </td>*@
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Data.Description)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Data.ExecutionModeLabel)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Data.StatusLabel)
                        </td>
                        <td class="text-center">
                            @Html.DisplayFor(modelItem => item.Data.LastExecutedOn)
                        </td>
                        <td class="text-center">
                            <button class="btn " title="View History " type="button" onclick="LoadHistory(@item.Data.Id)"><i class="fa-solid fa-list fa-fade fa-1x" style="color: #006096;"></i></button>


                            <a class="btn fa-solid fa-pen-to-square fa-fade fa-1x" style="color: #006096;" href="javascript:void(0);" title="Edit" onclick="redirectToEdit('@item.Data.FileName', @item.Data.Id)"></a>


                            <button style="color: #006096;" class="btn " title="Delete" type="button" onclick="redirectToDelete('@item.Data.FileName')"><i class="fa-solid fa-trash fa-fade fa-1x"></i></button>



                        </td>

                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="HistoryModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable" role="document">

        <div class="modal-content pt-2">
            <div class="modal-header p-0">
                <h5 class="modal-title" id="exampleModalLabel"><b>Execution History</b></h5>

                <a style="margin-left: 850px; color: #006096;" title="Export to Excel" id="printIcon" data-toggle="tooltip" data-placement="top" class="btn btn-sm btn-default float-md-right mb-2"><i id="exportButton" class="fa-regular fa-file-excel fa-fade fa-2x"></i></a>



                <button type="button" class="closee btn btn-danger" onclick="$('#HistoryModal').modal('hide')" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="HistoryModalBody">




            </div>

        </div>
    </div>
</div>


<script>
    $.noConflict();
    jQuery(document).ready(function ($) {
        $('#table-exports').DataTable();
    });
</script>
<script>
    document.getElementById("pipelineForm").addEventListener("submit", function (event) {


        var pipelineName = document.getElementById("pipelineName").value.trim();
        var fileNames = document.querySelectorAll(".fileNameColumn");

        // Loop through the filenames in the table
        for (var i = 0; i < fileNames.length; i++) {
            var fileName = fileNames[i].textContent.trim();

            // If the entered pipeline name matches a filename, prevent form submission
            if (pipelineName.toLowerCase() === fileName.toLowerCase()) {
                event.preventDefault();
                Swal.fire({
                    icon: "warning",
                    text: "Pipeline name already exists. Please choose a different name.",
                });

                return;
            }
        }
    });
</script>




<script>
    function encryptData(data) {
        // Convert the integer data to a string
        var dataString = String(data);

        // Encrypt the data using CryptoJS
        var encryptedData = CryptoJS.AES.encrypt(JSON.stringify({ data: dataString }), 'secret_key').toString();

        return encryptedData;
    }
    function redirectToEdit(fileName, id) {
        var encryptedFileName = encryptData(fileName);
        window.location.href = '/ETLDashboard/Index?strid=' + encodeURIComponent(encryptedFileName);
    }

    function redirectToDelete(fileName) {

        DeletePipeLine(fileName);

    }
    $(document).ready(function () {
        // Check for URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const status = urlParams.get('status');

        // Get the h3 elements
        const successElement = document.getElementById('Success');
        const failElement = document.getElementById('fail');

        // Check the 'status' parameter and update the h3 elements
        if (status === 'Success') {
            successElement.textContent = 'The PipeLine was successful Created!';
            failElement.textContent = ''; // Clear any previous message in the fail element
        } else if (status === 'Fail') {
            failElement.textContent = 'The PipeLine Creation Was Failed!';
            successElement.textContent = ''; // Clear any previous message in the success element
        }

    });

    function LoadHistory(id) {
        $('#overlay').show();
        $.ajax({
            url: '/PipelineDashBoard/FetchPipelineExecutionHistoryById', // Update with your controller name
            type: 'GET',
            data: { id: id },
            success: function (response) {
                // Inject the response (history) into the modal body
                $('#HistoryModalBody').html(response);

                // Show the modal
                $('#HistoryModal').modal('show');
                $('#overlay').hide();
            },
            error: function () {
                alert('Failed to load history. Please try again.');
                $('#overlay').hide();
            }
        });
    }


    function DeletePipeLine(PipeLineName) {

    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            $('#overlay').show();
              $.ajax({
                type: "Delete",
                dataType: "json",
                url: "@Url.Action("DeletePipeLine", "PipelineConfiguration")",

                  data: { "PipeLineName": PipeLineName },
                  success: function (response) {
                      if (response.message == "success") {
                          Swal.fire(
                              'Deleted!',
                              'Data Deleted Successfully!',
                              'success'
                          ).then((result) => {
                              if (result.isConfirmed) {
                                  $('#overlay').hide();
                                  location.href = "/PipelineDashBoard/Index";
                              }
                              else if (result.isDenied) {
                                  $('#overlay').hide();
                                  Swal.fire('Changes are not saved', '', 'info')
                              }
                          })
                      }
                      else {
                          Swal.fire({
                              icon: "error",
                              title: "Oops...",
                              text: response.message,

                          });
                          $('#overlay').hide();
                      }
                }
            });

        }
        return false;
    })
}
</script>


<script>
    document.getElementById('exportButton').addEventListener('click', function () {
        // Get the table element
        var tbl = document.getElementById('tbl');

        // Create a new workbook
        var wb = XLSX.utils.table_to_book(tbl, { sheet: "Execution History" });

        // Export to Excel file
        XLSX.writeFile(wb, 'PipeLineExecutionHistory.xlsx');
    });
</script>
