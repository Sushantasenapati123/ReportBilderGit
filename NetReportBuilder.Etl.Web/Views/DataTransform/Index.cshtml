@using System;
@using System.Data;
@using NetReportBuilder.Etl.Core;
@using NetReportBuilder.Etl.Web.Controllers;
@Model DataTransformViewModel;
<!DOCTYPE html>
<head>
    <link href="~/css/InputQueryPage.css" rel="stylesheet" />
</head>
<style>
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
        }

            .tab button:hover {
                background-color: #ddd;
            }

            .tab button.active {
                background-color: #ccc;
            }

    .tabcontent {
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }

    .schema-content, .viewdata-content {
        height: 150px;
        overflow-y: scroll;
        white-space: pre-wrap;
        background-color: #f5f5f5;
        border: 1px solid #ccc;
        padding: 10px;
    }
</style>
<style>

    #SourceGrid {
        font-family: Arial, Helvetica, sans-serif;
        border-collapse: collapse;
        width: 100%;
        padding: 5px;
        margin: 5px;
    }

        #SourceGrid td, #SourceGrid th {
            border: 1px solid #ddd;
            padding: 5px;
            width: auto;
            text-align: left;
        }

        #SourceGrid tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #SourceGrid tr:hover {
            background-color: #ddd;
        }

        #SourceGrid th {
            padding: 5px;
            text-align: center;
            background-color: gray;
            color: white;
            width: auto;
            height: auto;
        }
</style>
<form id="compileForm">

    <div class="form-group">
        <div class="row">
            <input type="button" value="Apply" onclick="ApplyFilter();" />
        </div>
        <div class="row">
            <div class="col-md-4">

                <div class="containerr">
                    <div class="flex-item" style="width:auto; height:200px;overflow-x:hidden;overflow-y:scroll;">
                        <ht2>Fields:  </ht2>
                        <table id="tblCoumnList">
                            <tr>
                                <td>
                                    <input id="SelectAll" type="checkbox" name="SelectAll" value="Select All" checked="checked" />
                                </td>
                                <td>
                                    <label for="SelectAll">Select All</label>
                                </td>

                            </tr>
                            @foreach (var field in Model.Fields)
                            {

                                <tr>
                                    <td>
                                        <input id="@field.Text" type="checkbox" name="@field.Text" value="@field.Value" checked="@field.Selected" class="checkbox" />
                                    </td>
                                    <td>
                                        <label for="@field.Text">@field.Text</label>
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                    <div class="flex-item" style="width:100%;">
                        <input id="btnAddFilter" type="button" value="Add Filter" onclick="AddFilter();" />
                        <div id="dvFilter" class="form-control" style="height:250px; width: 100%; overflow-y: scroll;
 border: 1px solid #ccc; padding: 5px;">
                            <table id="tblFilterBody" class="table table-bordered form-control" style="width:100%;">
                                <tr>
                                    <td>
                                        Field
                                    </td>
                                    <td>
                                        Clause
                                    </td>
                                    <td>
                                        Condition
                                    </td>
                                    <td>
                                        Condition Value
                                    </td>
                                    <td>
                                        Aggregate
                                    </td>
                                </tr>

                                @foreach (var column in Model.Fields)
                                {
                                    <tr>
                                        <td>
                                            @column.Text
                                        </td>
                                        <td>
                                            @Html.DropDownList("SelectedClause", ViewBag.Clauses as List<SelectListItem>, "Select Clause")
                                        </td>
                                        <td>
                                            @Html.DropDownList("SelectedCondition", ViewBag.Conditions as List<SelectListItem>, "Select Condition")
                                        </td>
                                        <td>
                                            <input type="text" id="ConditionValue" />
                                        </td>
                                        <td>
                                            @Html.DropDownList("SelectedAggegateFunction", ViewBag.AggegateFunctions as List<SelectListItem>, "Select Condition")

                                        </td>

                                    </tr>

                                }
                            </table>
                        </div>



                    </div>
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div id="ViewTable" class="form-control" style="height:250px; width: 100%; overflow-y: scroll;
                border: 1px solid #ccc; padding: 5px;">
                    <table id="SourceGrid" class="table table-bordered" style="width:100%;height:100%;">
                        <tr>
                            @foreach (DataColumn dc in Model.ResultSet.Columns)
                            {
                                <th>@dc.ColumnName</th>
                            }
                        </tr>
                        @foreach (DataRow dr in Model.ResultSet.Rows)
                        {
                            <tr>
                                @foreach (DataColumn dc in Model.ResultSet.Columns)
                                {
                                    <td>
                                        @dr[@dc.ColumnName].ParseToText()
                                    </td>
                                }
                            </tr>
                        }

                    </table>
                </div>

            </div>
        </div>
    </div>

    <script>
        function createDropdownOptions(name) {
            let dropwdown = document.createElement("SELECT");
            dropdown.id = name;
            dropdown.name = name;

            // Clear existing options (if any)
            dropdown.innerHTML = '';

            // Add a default option
            const defaultOption = document.createElement('option');
            defaultOption.text = 'Select a condition';
            defaultOption.value = '';
            dropdown.appendChild(defaultOption);

            // Add options from the fruits array
            conditions.forEach(condition => {
                const option = document.createElement('option');
                option.text = condition;
                option.value = condition.toLowerCase(); // Example: Use lowercase as the value
                dropdown.appendChild(option);
            });
            return dropwdown;
        }
        var conditions = ["=", ">", "<", "<=", ">=", "not equal", "between", "is null"];
        function AddFilter() {
            debugger;
            var filterTable = $('#tblFilterBody');
            if (filterTable.find('tr').length > 0) {
                let length = filterTable.find('tr').length + 1;
                var tr = filterTable.insertRow(length);
                let tcWhere = tr.insertCell(0);
                tcWhere.innerHTML = "and";

                let tcConditions = tr.insertCell(1);
                tc.innerHTML = createDropdownOptions("where");
                // Table has rows
                console.log('Table has rows.');
            } else {
                var tr = filterTable.insertRow(0);
                let tcWhere = tr.insertCell(0);
                tcWhere.innerHTML = "Where";

                let tcConditions = tr.insertCell(1);
                tc.innerHTML = createDropdownOptions("where");

            }
        }
        //function AddFilter() {
        //    var selectedValues = [];
        //    $('#tblCoumnList input:checked').each(function () {
        //        selectedValues.push($(this).val());
        //    });
        //    var fields = selectedValues.join(",");


        //    <select class="form-control" style="width: 100%;" data-bind="options: fieldFilter, value: $parent.Operator" required=""><option value="=">=</option><option value=">">&gt;</option><option value="<">&lt;</option><option value=">=">&gt;=</option><option value="<=">&lt;=</option><option value="not equal">not equal</option><option value="between">between</option><option value="is blank">is blank</option><option value="is not blank">is not blank</option></select>


        //}
        function AddFilterRow() {
            $('#tbody').append(`
                        <tr id="R${++rowIdx}">
                            <td class="row-index text-center" style="text-align: center; vertical-align: middle;">
                                <input id="txtKeyParam${rowIdx}" style="width:150px;display: block; margin: 0 auto;" class="inputs form-control m-input">
                            </td>
                            <td class="row-index text-center" style="text-align: center; vertical-align: middle;">
                                <input id="txtValueParam${rowIdx}" style="width:150px;display: block; margin: 0 auto;" class="inputs form-control m-input">
                            </td>
                            <td class="text-center" style="text-align: center; vertical-align: middle;">
                               <button class="btn btn-primary add" type="button"><i class="fa-solid fa-plus"></i></button>

                                <button class="btn btn-danger remove" type="button"><i class="fa-solid fa-trash"></i></button>
                            </td>
                        </tr>
                 `);
        }

        function JSONToHTMLTable(jsonData, elementToBind) {
            debugger;
            //This Code gets all columns for header   and stored in array col
            var col = [];
            for (var i = 0; i < jsonData.length; i++) {
                for (var key in jsonData[i]) {
                    if (col.indexOf(key) === -1) {
                        col.push(key);
                    }
                }
            }

            //This Code creates HTML table
            var table = document.createElement("table");
            table.classList.add("table");
            table.classList.add("table-bordered");
            table.id = "SourceGrid";
            //This Code getsrows for header creader above.
            var tr = table.insertRow(-1);

            for (var i = 0; i < col.length; i++) {
                var th = document.createElement("th");
                th.innerHTML = col[i];
                tr.appendChild(th);
            }

            //This Code adds data to table as rows
            for (var i = 0; i < jsonData.length; i++) {

                tr = table.insertRow(-1);

                for (var j = 0; j < col.length; j++) {
                    var tabCell = tr.insertCell(-1);
                    tabCell.innerHTML = jsonData[i][col[j]];
                }
            }

            //This Code gets the all columns for header
            var divContainer = document.getElementById(elementToBind);
            divContainer.innerHTML = "";
            divContainer.appendChild(table);
        }
        function GetSelectedColumns() {
            var SelectedColumns = [];
            $('#tblCoumnList input:checked').each(function () {

                SelectedColumns.push($(this).val());
            });
            let index = SelectedColumns.indexOf("Select All");
            if (index > -1) {
                SelectedColumns.splice(index, 1);
            }
            return SelectedColumns;
        }
        function ApplyFilter() {

            /////////////////////////////////////////////////
            // Array to store column filters
            var columnFilters = [];

            // Loop through each row in the table, skipping the first row (header row)
            $('#tblFilterBody tbody tr').each(function (index, row) {
                if (index > 0) {
                    var $columns = $(row).find('td');

                    // Extract data from each column in the row
                    var fieldName = $($columns[0]).text().trim();
                    var clause = $($columns[1]).find('select[name="SelectedClause"]').val();
                    var condition = $($columns[2]).find('select[name="SelectedCondition"]').val();
                    var conditionValue = $($columns[3]).find('input[type="text"]').val();
                    var aggregateFunction = $($columns[4]).find('select[name="SelectedAggegateFunction"]').val();

                    // Create a ColumnFilter object and add to the array
                    var filter = {
                        FieldName: fieldName,
                        Clause: clause,
                        Condition: condition,
                        ConditionValue: conditionValue,
                        AggregateFunction: aggregateFunction
                    };
                    columnFilters.push(filter);
                }
            });

            // Prepare data to send to the controller
            var viewModel = {
                ResultSet: null, // Set this if needed
                // FieldsCheck: GetSelectedColumns(), // Set this if needed
                FieldsCheck: GetSelectedColumns(), // Set this if needed,
                ColumnFilters: columnFilters
            };

            fetch('/DataTransform/Apply', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(viewModel)

            })
                .then(response => response.json())  // Get the response text
                .then(data => {
                    console.log('Response:', data);
                    let dt = JSON.parse(data);
                  JSONToHTMLTable(dt.ResultSet, 'ViewTable');
                })





            /////////////////////////////////////////////////


            debugger;
            let selectedColumns = GetSelectedColumns();
            if (selectedColumns == null || selectedColumns == undefined || selectedColumns.length <= 0) {
                alert('Please select any columns to continue.');
                return;
            }

            let entity =
            {
                SelectedFields: selectedColumns
            };
            const form = document.getElementById('compileForm');
            const formData = new FormData(form);
            let data = JSON.stringify(entity);
            formData.append('filter', data);

            //fetch('/DataTransform/Apply', {
            //    method: 'POST',
            //    body: formData
            //})
            //    .then(response => response.json())
            //    .then(data => {
            //        debugger;
            //        let dt = JSON.parse(data);
            //        JSONToHTMLTable(dt.ResultSet, 'ViewTable');
            //    })
            //    .catch(error => console.error('Error:', error));

        }


        $(document).ready(function () {
            // When the "Select All" checkbox is clicked
            $('#SelectAll').click(function () {
                // If it is checked, check all checkboxes; otherwise, uncheck all checkboxes
                $('.checkbox').prop('checked', this.checked);
            });

            // When any individual checkbox is clicked
            $('.checkbox').click(function () {
                // Check if all checkboxes are checked
                if ($('.checkbox:checked').length == $('.checkbox').length) {
                    // If all checkboxes are checked, check the "Select All" checkbox
                    $('#SelectAll').prop('checked', true);
                } else {
                    // Otherwise, uncheck the "Select All" checkbox
                    $('#SelectAll').prop('checked', false);
                }
            });




        });

    </script>
</form>










