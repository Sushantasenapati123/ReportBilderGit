<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<head>
    <link href="~/css/InputQueryPage.css" rel="stylesheet" />
    <style>
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }

            .tab button {
                background-color: inherit;
                float: left;
                border: none;
                outline: none;
                cursor: pointer;
                padding: 14px 16px;
                transition: 0.3s;
            }

                .tab button:hover {
                    background-color: #ddd;
                }

                .tab button.active {
                    background-color: #ccc;
                }

        .tabcontentt {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }

        .schema-content, .viewdata-content {
            height: 150px;
            overflow-y: scroll;
            white-space: pre-wrap;
            background-color: #f5f5f5;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<div class="row">
    <div class="col-md-4">
        <form id="compileForm">
            <div class="containerr">
                <div class="flex-item">
                    <h2>Input</h2>
                    <select class="form-control" id="DataBaseType">
                        <option value="SqlServer">SQL Server</option>
                        <option value="mysql">MySQL</option>

                    </select>

                    <textarea id="Input" placeholder="Wite Query Here.." name="Input" rows="10" cols="70" class="form-control"></textarea>
                </div>
                <div class="flex-item">
                    <h2>Output</h2>
                    <div id="Output" class="form-control" style="height: 260px; width:400px; overflow-y: scroll; white-space: pre-wrap; background-color: #f5f5f5; border: 1px solid #ccc; padding: 10px;">
                    </div>



                </div>
            </div>






            <div class="button-container">
                <div class="form-group">
                    <input id="compileButton" style="margin-top:62px" type="button" value="Compile" class="btn btn-primary" onclick="submitForm()" />
                </div>

                <div class="form-group">
                    <input id="ExportButton" hidden type="button" disabled value="Export" class="btn btn-success" onclick="openModal()" />
                </div>
            </div>

            <br />


        </form>
    </div>
</div>
<div class="tab">
    <button class="tablinks" onclick="openTab1(event, 'Schema')">Schema Info</button>
    <button class="tablinks" onclick="openTab1(event, 'ViewData')">View Data Query</button>
</div>
<div id="Schema" class="tabcontentt">

    <div class="schema-content" id="SchemaContent">
        <div id="Schema" class="form-control" style="height: 150px; width: 320px; overflow-y: scroll; white-space: pre-wrap; background-color: #f5f5f5; border: 1px solid #ccc; padding: 10px;">
        </div>
    </div>
</div>

<div id="ViewData" class="tabcontentt">

    <div class="viewdata-content" id="ViewDataContent">
        <div id="ViewTable" class="form-control" style="height: 150px; width: 720px; overflow-y: scroll; white-space: pre-wrap; background-color: #f5f5f5; border: 1px solid #ccc; padding: 10px;">
        </div>
    </div>
</div>
<script>
    function openTab1(evt, tabName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontentt");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }
</script>
<script>
    // Declare a variable outside any function scope
    let tableDropdownData = null;
    function submitForm() {

        if (document.getElementById('Input').value == "") {
            alert("Please Write Query First");
            return;
        }

        document.getElementById("compileButton").disabled = true;

        document.getElementById('Output').innerHTML = ""; // Clear previous output
        document.getElementById('Schema').innerHTML = ""; // Clear previous output
        document.getElementById('ViewTable').innerHTML = ""; // Clear previous output

        const form = document.getElementById('compileForm');
        const formData = new FormData(form);

        formData.append('DBType', document.getElementById('DataBaseType').value); // Append the table name to the form data
        formData.append('input', document.getElementById('Input').value);


        fetch('/DataMapping/CompileQuery', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {


                const outputMessages = data.messages;
                outputMessages.forEach(message => {
                    const outputElement = document.getElementById('Output');
                    outputElement.innerHTML += message + "<br>"; // Append each message with a line break

                });


                //    // Display schema info
                const schemaElement = document.getElementById('Schema');
                schemaElement.innerHTML = data.schemaInfo;


                schemaElement.innerHTML = `<pre>${data.schemaInfo}</pre>`;


                //    // Display view table
                const viewTableElement = document.getElementById('ViewTable');
                viewTableElement.innerHTML = data.viewTable;







                var IsSuccessful = data.isSuccessfullyCompile;
                if (IsSuccessful) {
                    document.getElementById("ExportButton").disabled = false;
                    document.getElementById("DataMapping").disabled = false;
                    

                    // Check if ListOfProperty is defined and is an array
                    const listOfProperty = data.listOfProperty;
                    if (Array.isArray(listOfProperty)) {
                        const sourceGridBody = document.querySelector("#SourceGrid tbody");
                        sourceGridBody.innerHTML = ""; // Clear previous content

                        listOfProperty.forEach(property => {
                            const row = document.createElement("tr");

                            const checkboxCell = document.createElement("td");
                            const checkbox = document.createElement("input");
                            checkbox.type = "checkbox";
                            checkboxCell.appendChild(checkbox);

                            const columnNameCell = document.createElement("td");
                            columnNameCell.textContent = property.column_Name;

                            const columnTypeCell = document.createElement("td");
                            columnTypeCell.textContent = property.column_Type;

                            /*row.appendChild(checkboxCell);*/
                            row.appendChild(columnNameCell);
                            row.appendChild(columnTypeCell);

                            sourceGridBody.appendChild(row);
                        });
                    } else {
                        console.error('ListOfProperty is not an array:', listOfProperty);
                    }


                    // Dynamically add rows to the destination grid
                    populateDestinationGrid(data.listOfProperty);


                    // Populate table name dropdowns
                    populateTableDropdowns(data.listOfTable.result);

                    // Store data.listOfTable.result in the variable
                    tableDropdownData = data.listOfTable.result;


                }
                else {
                    document.getElementById("ExportButton").disabled = true;

                    document.getElementById('existingExportOptions').style.display = 'none'; // or 'none' to hide it initially
                }
                document.getElementById("compileButton").disabled = false;

            })
            .catch(error => console.error('Error:', error));

    }

    function promptForTableName() {
        openModal();
        var tableName = prompt("Please enter the table name:", "");
        if (tableName !== null && tableName !== "") {
            Export(tableName);
        }
    }

    function Export(tableName) {

        document.getElementById('Schema').innerHTML = ""; // Clear previous output
        document.getElementById('ViewTable').innerHTML = ""; // Clear previous output
        const form = document.getElementById('compileForm');
        const formData = new FormData(form);
        formData.append('tableName', tableName); // Append the table name to the form data
        formData.append('input', document.getElementById('Input').value);
        formData.append('DBType', document.getElementById('DataBaseType').value);
        document.getElementById('Output').innerHTML = ""; // Clear previous output

        fetch('/DataMapping/Export', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {


                const outputMessages = data.messages;
                outputMessages.forEach(message => {
                    const outputElement = document.getElementById('Output');
                    outputElement.innerHTML += message + "<br>"; // Append each message with a line break

                });



            })
            .catch(error => console.error('Error:', error));

    }



</script>


<script>
    // If you want to initially hide the div and show it upon some action
    document.getElementById('existingExportOptions').style.display = 'none'; // or 'none' to hide it initially
    function openModal() {

        document.getElementById('newInsertOptions').style.display = 'block';

        document.getElementById('InsertTypeDiv').style.display = 'block'; // or 'none' to hide it initially

        document.getElementById('InsertButton').hidden = false;
        // If you want to initially hide the div and show it upon some action

    }



    function handleExport() {
        closeModal();
        var existingOption = document.getElementById('existingOption');
        if (existingOption.checked) {
            document.getElementById('existingModal').style.display = "block";
        }
    }
  



</script>